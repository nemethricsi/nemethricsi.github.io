{"version":3,"sources":["Header.js","pages/Home.js","pages/About.js","pages/Contact.js","Container.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","to","Wrapper","styled","div","Home","About","Contact","withRouter","TransitionGroup","className","CSSTransition","key","location","timeout","enter","exit","classNames","exact","path","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAsBeA,EAnBA,SAAAC,GACb,OACE,kBAAC,WAAD,KACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGJ,+B,mLCdN,IAQMC,EAAUC,IAAOC,IAAV,KAOEC,EAfF,WACX,OACE,kBAACH,EAAD,KACE,sC,+JCHN,IAQMA,EAAUC,IAAOC,IAAV,KAOEE,EAfD,WACZ,OACE,kBAAC,EAAD,KACE,uC,gKCHN,IAQMJ,EAAUC,IAAOC,IAAV,KAOEG,EAfC,WACd,OACE,kBAAC,EAAD,KACE,yC,okBCEN,IA4BML,EAAUC,IAAOC,IAAV,KA6BEI,eAzDG,SAACR,GACjB,OACE,kBAAC,EAAD,KACE,kBAACS,EAAA,EAAD,CAAiBC,UAAU,oBACzB,kBAACC,EAAA,EAAD,CACEC,IAAKZ,EAAMa,SAASD,IACpBE,QAAS,CAAEC,MAAO,IAAKC,KAAM,KAC7BC,WAAY,QAEZ,6BAASP,UAAU,iBACjB,kBAAC,IAAD,CAAQG,SAAUb,EAAMa,UACtB,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAChB,kBAAC,EAAD,eCRDC,EAbH,WACV,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UCCUC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba669c80.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = props => {\n  return (\n    <Fragment>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n        <li>\n          <Link to=\"/contact\">Contact</Link>\n        </li>\n      </ul>\n      <hr />\n    </Fragment>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from \"styled-components\";\n\nconst Home = () => {\n  return(\n    <Wrapper>\n      <h1>Home</h1>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  /* background-color: red;\n  color: #fff;\n  height: 100vh;\n  padding: 1% 10px; */\n`;\n\nexport default Home;\n","import React from 'react';\nimport styled from \"styled-components\";\n\nconst About = () => {\n  return(\n    <Wrapper>\n      <h1>About</h1>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  /* background-color: blue;\n  color: #fff;\n  height: 100vh;\n  padding: 1% 10px; */\n`;\n\nexport default About;\n","import React from 'react';\nimport styled from \"styled-components\";\n\nconst Contact = () => {\n  return(\n    <Wrapper>\n      <h1>Contact</h1>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  /* background-color: green;\n  color: #fff;\n  height: 100vh;\n  padding: 1% 10px; */\n`;\n\nexport default Contact;\n","import React from \"react\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport HomePage from \"./pages/Home\";\nimport AboutPage from \"./pages/About\";\nimport ContactPage from \"./pages/Contact\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport styled from \"styled-components\";\n\nconst Container = (props) => {\n  return (\n    <Wrapper>\n      <TransitionGroup className=\"transition-group\">\n        <CSSTransition \n          key={props.location.key}\n          timeout={{ enter: 100, exit: 100 }}\n          classNames={'fade'}\n        >\n          <section className=\"route-section\">\n            <Switch location={props.location}>\n              <Route exact path=\"/\">\n                <HomePage />\n              </Route>\n              <Route exact path=\"/about\">\n                <AboutPage />\n              </Route>\n              <Route exact path=\"/contact\">\n                <ContactPage />\n              </Route>\n            </Switch>\n          </section>\n        </CSSTransition>\n      </TransitionGroup>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n    .fade-enter {\n        opacity: 0.01;\n    }\n    .fade-enter.fade-enter-active {\n        opacity: 1;\n        transition: opacity 100ms ease-in;\n    }\n    .fade-exit {\n        opacity: 1;\n    }\n      \n    .fade-exit.fade-exit-active {\n        opacity: 0.01;\n        transition: opacity 100ms ease-in;\n    }\n\n    .transition-group {\n      position: relative;\n    }\n\n    .route-section {\n      position: absolute;\n      width: 100%;\n      top: 0;\n      left: 0;\n    }\n`;\n\nexport default withRouter(Container);\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Header from './Header';\nimport Container from './Container';\n\nconst App = () => {\n  return (\n    <Fragment>\n      <Router>\n        <div>\n          <Header />\n          <Container />\n        </div>\n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}