{"version":3,"sources":["webpack:///./src/functions/updateCart.js","webpack:///./src/functions/addToCart.js","webpack:///./src/components/AddtoCartButton.js","webpack:///./src/templates/Product.js"],"names":["updateCart","existingCart","product","line_items","existingProductsInCart","productExistsIndex","productId","newArray","filter","item","product_id","indexOf","isProductInCart","wooCommerceId","updatedProducts","quantity","newProduct","createCartItem","push","getUpdatedProducts","addToCart","JSON","parse","window","localStorage","getItem","updatedCart","setItem","stringify","cart","name","price","parseInt","image","images","src","AddToCartButton","dispatch","useDispatch","stock_quantity","role","tabIndex","type","onKeyDown","onClick","items","loadCart","openCart","e","console","log","handleAddToCart","SingleProductPage","data","on_sale","dangerouslySetInnerHTML","__html","price_html","map","i","key","alt"],"mappings":"gKAEO,SAASA,EAAWC,EAAcC,GAKvC,MAHoB,CAClBC,WAKJ,SAA4BC,EAAwBF,GAClD,IAAMG,EAoBR,SAAyBD,EAAwBE,GAC/C,IAMMC,EAAWH,EAAuBI,QANZ,SAAAC,GAC1B,GAAIH,IAAcG,EAAKC,WACrB,OAAOD,KAMX,OAAOL,EAAuBO,QAAQJ,EAAS,IA7BpBK,CACzBR,EACAF,EAAQW,eAGV,IAAK,EAAIR,EAAoB,CAC3B,IAAIS,EAAkBV,EAKtB,OAJqBU,EAAgBT,GAEtBU,UAAY,EAEpBD,EAEP,IAAME,EAAaC,EAAef,GAElC,OADAE,EAAuBc,KAAKF,GACrBZ,EAvBee,CAAmBlB,EAAaE,WAAYD,ICD/D,SAASkB,EAAUlB,GACxB,IAAMD,EAAeoB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,YAE5D,GAAIxB,EAAc,CAChB,IAAMyB,EAAc1B,EAAWC,EAAcC,GAC7CqB,OAAOC,aAAaG,QAAQ,UAAWN,KAAKO,UAAUF,QACjD,CACL,IAAIG,EAAO,GACXA,EAAKX,KAAKD,EAAef,IACzBqB,OAAOC,aAAaG,QAAQ,UAAWN,KAAKO,UAAU,CAAEzB,WAAY0B,MAIjE,SAASZ,EAAef,GAC7B,MAAO,CACL4B,KAAM5B,EAAQ4B,KACdpB,WAAYR,EAAQW,cACpBE,SAAU,EACVgB,MAAOC,SAAS9B,EAAQ6B,OACxBE,OAAO/B,aAAA,EAAAA,EAASgC,OAAO,GAAGC,MAAO,M,4BCftB,SAASC,EAAT,GAAuC,IAAZlC,EAAW,EAAXA,QAClCmC,EAAWC,cAkBjB,OACE,oCACGpC,EAAQqC,eAAiB,EACxB,4CAEA,uBACEC,KAAK,SACLC,SAAU,EACVC,KAAK,SACLC,UAAWvB,EACXwB,QAAS,kBAvBO,SAAA1C,GACtBkB,EAAUlB,GAEV,IACE,IACM2C,EADUxB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,YACjCtB,WACtBkC,EAASS,YAASD,IAClBR,EAASU,eACT,MAAOC,GACPC,QAAQC,IAAIF,IAcOG,CAAgBjD,KALjC,kB,kCC9BR,gGAKe,SAASkD,EAAT,GAAmD,IAAdlD,EAAa,EAArBmD,KAAQnD,QAClD,OACE,kBAAC,IAAD,KACE,4BACGA,EAAQ4B,KACR5B,EAAQoD,SAAW,wCAEtB,6BAAMpD,EAAQqC,eAAd,aACA,yBAAKgB,wBAAyB,CAAEC,OAAQtD,EAAQuD,cAChD,kBAAC,IAAD,CAAiBvD,QAASA,IACzBA,EAAQgC,QACPhC,EAAQgC,OAAOwB,KAAI,SAACzB,EAAO0B,GAAR,OACjB,yBAAKC,IAAKD,EAAGxB,IAAKF,EAAME,IAAK0B,IAAK5B,EAAMH","file":"component---src-templates-product-js-85633c0558c44f49337e.js","sourcesContent":["import { createCartItem } from \"./addToCart\"\n\nexport function updateCart(existingCart, product) {\n  const updatedProducts = getUpdatedProducts(existingCart.line_items, product)\n  const updatedCart = {\n    line_items: updatedProducts,\n  }\n  return updatedCart\n}\n\nfunction getUpdatedProducts(existingProductsInCart, product) {\n  const productExistsIndex = isProductInCart(\n    existingProductsInCart,\n    product.wooCommerceId\n  )\n  // Ha benne van a kos√°rban, teh√°t az indexe nagyon -1-n√©l, akkor update-lje a term√©ket\n  if (-1 < productExistsIndex) {\n    let updatedProducts = existingProductsInCart\n    let updatedProduct = updatedProducts[productExistsIndex]\n\n    updatedProduct.quantity += 1\n\n    return updatedProducts\n  } else {\n    const newProduct = createCartItem(product)\n    existingProductsInCart.push(newProduct)\n    return existingProductsInCart\n  }\n}\n\n// return index of the product if it exists\nfunction isProductInCart(existingProductsInCart, productId) {\n  const returnItemThatExits = item => {\n    if (productId === item.product_id) {\n      return item\n    }\n  }\n\n  const newArray = existingProductsInCart.filter(returnItemThatExits)\n\n  return existingProductsInCart.indexOf(newArray[0])\n}\n","import { updateCart } from \"./updateCart\"\n\nexport function addToCart(product) {\n  const existingCart = JSON.parse(window.localStorage.getItem(\"wooCart\"))\n\n  if (existingCart) {\n    const updatedCart = updateCart(existingCart, product)\n    window.localStorage.setItem(\"wooCart\", JSON.stringify(updatedCart))\n  } else {\n    let cart = []\n    cart.push(createCartItem(product))\n    window.localStorage.setItem(\"wooCart\", JSON.stringify({ line_items: cart }))\n  }\n}\n\nexport function createCartItem(product) {\n  return {\n    name: product.name,\n    product_id: product.wooCommerceId,\n    quantity: 1,\n    price: parseInt(product.price),\n    image: product?.images[0].src || null,\n  }\n}\n","import React from \"react\"\nimport { toast } from \"react-toastify\"\nimport { addToCart } from \"../functions/addToCart\"\nimport { useDispatch } from \"react-redux\"\nimport { loadCart, openCart } from \"../cartSlice\"\n\nexport default function AddToCartButton({ product }) {\n  const dispatch = useDispatch()\n  const notify = name => {\n    toast(`üéâ ${name} was added to cart!`)\n  }\n\n  const handleAddToCart = product => {\n    addToCart(product)\n    // notify(product.name)\n    try {\n      const newCart = JSON.parse(window.localStorage.getItem(\"wooCart\"))\n      const items = newCart.line_items\n      dispatch(loadCart(items))\n      dispatch(openCart())\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <>\n      {product.stock_quantity < 1 ? (\n        <p>Out of stock.</p>\n      ) : (\n        <a\n          role=\"button\"\n          tabIndex={0}\n          type=\"button\"\n          onKeyDown={addToCart}\n          onClick={() => handleAddToCart(product)}\n        >\n          Add to Cart\n        </a>\n      )}\n    </>\n  )\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport AddToCartButton from \"../components/AddtoCartButton\"\n\nexport default function SingleProductPage({ data: { product } }) {\n  return (\n    <Layout>\n      <h1>\n        {product.name}\n        {product.on_sale && <span>SALE!</span>}\n      </h1>\n      <div>{product.stock_quantity} in stock</div>\n      <div dangerouslySetInnerHTML={{ __html: product.price_html }} />\n      <AddToCartButton product={product} />\n      {product.images &&\n        product.images.map((image, i) => (\n          <img key={i} src={image.src} alt={image.name} />\n        ))}\n    </Layout>\n  )\n}\n\n// This needs to be dynamic based on the slug passed in via context in gatsby-node.js\nexport const query = graphql`\n  query($id: String!) {\n    product: wcProduct(id: { eq: $id }) {\n      name\n      id\n      wooCommerceId\n      slug\n      on_sale\n      stock_quantity\n      images {\n        name\n        src\n      }\n      price_html\n      price\n      regular_price\n      sale_price\n    }\n  }\n`\n"],"sourceRoot":""}