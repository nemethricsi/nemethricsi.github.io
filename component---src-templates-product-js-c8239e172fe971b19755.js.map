{"version":3,"sources":["webpack://gatsby-woocommerce-redux-starter/./src/components/AddToSnipCart.js","webpack://gatsby-woocommerce-redux-starter/./src/templates/Product.js","webpack://gatsby-woocommerce-redux-starter/./src/functions/useStockQuantity.js"],"names":["AddToSnipCart","product","type","class","data-item-id","slug","data-item-price","price","data-item-url","__dirname","data-item-name","name","data-item-image","images","src","SingleProductPage","data","productId","useState","stockQuantity","setStockQuantity","fetching","setFetching","useEffect","auth","btoa","process","fetch","method","headers","Authorization","then","res","json","stock_quantity","catch","err","console","error","useStockQuantity","wooCommerceId","Layout","on_sale","dangerouslySetInnerHTML","__html","price_html","map","image","i","key","alt"],"mappings":"uMAEe,SAASA,EAAT,GAAqC,IAAZC,EAAW,EAAXA,QACtC,OACE,gCACE,qBACEC,KAAK,SACLC,MAAM,oBACNC,eAAcH,EAAQI,KACtBC,kBAAiBL,EAAQM,MACzBC,gBAAkBC,aAAqBR,EAAQI,KAC/CK,iBAAgBT,EAAQU,KACxBC,kBAAiBX,EAAQY,OAAO,GAAGC,KAPrC,mBASmBb,EAAQM,MAT3B,W,sLCES,SAASQ,EAAT,GAAmD,IAAdd,EAAa,EAArBe,KAAQf,QAAa,ECL1D,SAA0BgB,GAAY,IAAD,GACAC,cAAS,MAA5CC,EADmC,KACpBC,EADoB,QAEVF,eAAS,GAAlCG,EAFmC,KAEzBC,EAFyB,KA8B1C,OA1BAC,gBAAU,WACR,IAAMC,EAAOC,KACRC,2FAELC,MACKD,kDAAyDT,EAC5D,CACEW,OAAQ,MACRC,QAAS,CAAEC,cAAc,SAAUN,KAGpCO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACwB,OAAxBA,EAAKC,eACPd,EAAiB,GAEjBA,EAAiBa,EAAKC,gBAExBZ,GAAY,MAEba,OAAM,SAAAC,GACLC,QAAQC,MAAMF,GACdd,GAAY,QAEf,CAACL,IAEG,CAAEE,gBAAeE,YDxBYkB,CAAiBtC,EAAQuC,eAArDrB,EADuD,EACvDA,cAAeE,EADwC,EACxCA,SAEvB,OACE,gBAACoB,EAAA,EAAD,KACE,0BACGxC,EAAQU,KAERV,EAAQyC,SAAW,sCAEtB,2BACGrB,EAAW,8CAA2B,yBAAIF,EAAJ,cAEzC,uBAAKwB,wBAAyB,CAAEC,OAAQ3C,EAAQ4C,cAE/CxB,EAAW,KAAO,gBAACrB,EAAA,EAAD,CAAeC,QAASA,IAE1CA,EAAQY,QACPZ,EAAQY,OAAOiC,KAAI,SAACC,EAAOC,GAAR,OACjB,uBAAKC,IAAKD,EAAGlC,IAAKiC,EAAMjC,IAAKoC,IAAKH,EAAMpC","file":"component---src-templates-product-js-c8239e172fe971b19755.js","sourcesContent":["import React from \"react\"\n\nexport default function AddToSnipCart({ product }) {\n  return (\n    <>\n      <a\n        type=\"button\"\n        class=\"snipcart-add-item\"\n        data-item-id={product.slug}\n        data-item-price={product.price}\n        data-item-url={`${__dirname}/product/${product.slug}`}\n        data-item-name={product.name}\n        data-item-image={product.images[0].src}\n      >\n        Add to SnipCart {product.price} HUF\n      </a>\n    </>\n  )\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport AddToCartButton from \"../components/AddtoCartButton\"\nimport { useStockQuantity } from \"../functions/useStockQuantity\"\nimport AddToSnipCart from \"../components/AddToSnipCart\"\n\nexport default function SingleProductPage({ data: { product } }) {\n  const { stockQuantity, fetching } = useStockQuantity(product.wooCommerceId)\n\n  return (\n    <Layout>\n      <h1>\n        {product.name}\n        {/* Ez egy példa, hogy lehet megjeleníteni, ha pl akciós a termék */}\n        {product.on_sale && <span>SALE!</span>}\n      </h1>\n      <div>\n        {fetching ? <p>Fetching stock...</p> : <p>{stockQuantity} in stock</p>}\n      </div>\n      <div dangerouslySetInnerHTML={{ __html: product.price_html }} />\n      {/* <AddToCartButton product={product} /> */}\n      {fetching ? null : <AddToSnipCart product={product} />}\n\n      {product.images &&\n        product.images.map((image, i) => (\n          <img key={i} src={image.src} alt={image.name} />\n        ))}\n    </Layout>\n  )\n}\n\n// This needs to be dynamic based on the slug passed in via context in gatsby-node.js\nexport const query = graphql`\n  query($id: String!) {\n    product: wcProduct(id: { eq: $id }) {\n      name\n      id\n      wooCommerceId\n      slug\n      on_sale\n      stock_quantity\n      images {\n        name\n        src\n      }\n      price_html\n      price\n      regular_price\n      sale_price\n    }\n  }\n`\n","import { useState, useEffect } from \"react\"\n\nexport function useStockQuantity(productId) {\n  const [stockQuantity, setStockQuantity] = useState(null)\n  const [fetching, setFetching] = useState(true)\n\n  useEffect(() => {\n    const auth = btoa(\n      `${process.env.GATSBY_WOO_CONSUMER_KEY}:${process.env.GATSBY_WOO_CONSUMER_SECRET}`\n    )\n    fetch(\n      `${process.env.GATSBY_WP_BASE_URL}/wp-json/wc/v3/products/${productId}`,\n      {\n        method: \"GET\",\n        headers: { Authorization: `Basic ${auth}` },\n      }\n    )\n      .then(res => res.json())\n      .then(json => {\n        if (json.stock_quantity === null) {\n          setStockQuantity(0)\n        } else {\n          setStockQuantity(json.stock_quantity)\n        }\n        setFetching(false)\n      })\n      .catch(err => {\n        console.error(err)\n        setFetching(false)\n      })\n  }, [productId])\n\n  return { stockQuantity, fetching }\n}\n"],"sourceRoot":""}